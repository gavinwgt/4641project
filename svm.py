# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j-U2ACjpXM92ARCwdZPqUwQWnHdR4MZ-
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import svm
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

#Load the data
df = pd.read_csv("rand_lyrics_with_sentiment.csv")

#Function to extract sentiment value
def extract_value(dict_str, key):
    #Split the string into parts based on comma
    parts = dict_str.split(",")
    for part in parts:
        if key in part:
            #Split the part on colon and strip whitespace and other characters
            key, value = part.split(":")
            value = value.strip().strip(' {}')
            return float(value)
    #If the key is not found in the string, return None
    return None

#Extract sentiment scores
for column in ['neg', 'neu', 'pos', 'comp']:
    df[column] = df['negnueposcomp'].apply(lambda s: extract_value(s, column))

#Define sentiment based on 'comp'
def label_sentiment(row):
    if row['comp'] > 0:
        return 1
    elif row['comp'] < 0:
        return -1
    else:
        return 0

df['sentiment'] = df.apply(lambda row: label_sentiment(row), axis=1)

#Vectorize lyrics using TF-IDF
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['Lyric'])

#Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, df['sentiment'], test_size=0.2, random_state=42)

#Train SVM
clf = svm.SVC()
clf.fit(X_train, y_train)

#Predict on test set
y_pred = clf.predict(X_test)

#Print classification report
print(classification_report(y_test, y_pred))

#Generate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

#Create a DataFrame from the confusion matrix
cm_df = pd.DataFrame(cm, index=['Negative', 'Neutral', 'Positive'], columns=['Negative', 'Neutral', 'Positive'])

#Plot the confusion matrix as a heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.show()